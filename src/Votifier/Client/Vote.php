<?php

namespace Votifier\Client;

class Vote
{
    private $host = '';
    private $votifierPort = '';
    private $publicKey = '';

    private $serviceName = '';
    private $username = '';
    private $address = '';
    private $timeStamp = '';

    /**
     * Vote constructor.
     *
     * @param string $server_ip     The IP address to reach Votifier
     * @param int    $votifier_port The port that Votifier is using (Default: 8192)
     * @param string $public_key    The public key string generated by Votifier
     * @param string $username      The user that should get the reward
     * @param string $server_list   The Name where the user voted (Is usually shown in the message)
     * @param string $user_ip       The IP from which the user voted
     */
    public function __construct($server_ip, $votifier_port, $public_key, $username, $server_list, $user_ip)
    {
        $this->host = $server_ip;
        $this->votifierPort = $votifier_port;
        $this->publicKey = $public_key;
        $this->publicKey = wordwrap($this->publicKey, 65, "\n", true); // Pharse the public key
        $this->publicKey = <<<EOF
-----BEGIN PUBLIC KEY-----
$this->publicKey
-----END PUBLIC KEY-----
EOF;

        $this->username = preg_replace('/[^A-Za-z0-9_]+/', '', $username); // Replace username to letters, numbers an "_"
        $this->address = $user_ip; // Get user IP
        $this->serviceName = $server_list;
    }

    /**
     * Sends the vote.
     *
     * @throws \Exception
     *
     * @return bool Returns true if there was no problem, otherwise Exception is thrown
     */
    public function send()
    {
        // Set voting time
        $this->timeStamp = time();

        // Details of the vote
        $votePackage = 'VOTE'."\n".
            $this->serviceName."\n".
            $this->username."\n".
            $this->address."\n".
            $this->timeStamp."\n";

        // Encrypt the string
        openssl_public_encrypt($votePackage, $encryptedVotePackage, $this->publicKey);

        // Try connect to server
        $s = fsockopen($this->host, $this->votifierPort, $errno, $errstr, 3);
        if (!$s) {
            fclose($s);
            throw new \Exception($errstr, $errno);
        }

        // Check whether the server returns "VOTIFIER 0.0"
        $header = fread($s, 64);
        if (false === $header || false === mb_strpos($header, 'VOTIFIER')) {
            fclose($s);
            throw new \Exception('The connection does not belong to Votifier');
        }

        // Send vote package
        if (false === fwrite($s, $encryptedVotePackage)) {
            fclose($s);
            throw new \Exception('Couldn\'t write to remote host');
        }

        return true;
    }
}
