<?php

/**
 * Votifier PHP Client
 *
 * @package   VotifierClient
 * @author    Manuele Vaccari <manuele.vaccari@gmail.com>
 * @copyright Copyright (c) 2017-2020 Manuele Vaccari <manuele.vaccari@gmail.com>
 * @license   https://github.com/D3strukt0r/votifier-client-php/blob/master/LICENSE.txt GNU General Public License v3.0
 * @link      https://github.com/D3strukt0r/votifier-client-php
 */

namespace D3strukt0r\VotifierClient\ServerType;

use D3strukt0r\VotifierClient\Messages;
use D3strukt0r\VotifierClient\ServerConnection;
use D3strukt0r\VotifierClient\VoteType\VoteInterface;
use Exception;

/**
 * The Class to access a server which uses the classic "Votifier" plugin.
 */
class ClassicVotifier implements ServerTypeInterface
{
    /**
     * @var string the domain or ip to connect to Votifier
     */
    private $host;

    /**
     * @var int the port which votifier uses on the server
     */
    private $port = 8192;

    /**
     * @var string The public.key which is generated by the plugin.
     */
    private $publicKey;

    /**
     * Creates the ClassicVotifier object.
     *
     * @param string   $host      (Required) The domain or ip to connect to Votifier
     * @param int|null $port      (Required) The port which votifier uses on the server
     * @param string   $publicKey (Required) The public.key which is generated by the plugin
     */
    public function __construct(string $host, ?int $port, string $publicKey)
    {
        $this->host = $host;

        if (null !== $port) {
            $this->port = $port;
        }

        $this->publicKey = $publicKey;
        $this->publicKey = wordwrap($this->publicKey, 65, "\n", true);
        $this->publicKey = <<<EOF
-----BEGIN PUBLIC KEY-----
{$this->publicKey}
-----END PUBLIC KEY-----
EOF;
    }

    /**
     * {@inheritdoc}
     */
    public function getHost(): string
    {
        return $this->host;
    }

    /**
     * {@inheritdoc}
     */
    public function getPort(): int
    {
        return $this->port;
    }

    /**
     * {@inheritdoc}
     */
    public function getPublicKey(): string
    {
        return $this->publicKey;
    }

    /**
     * {@inheritdoc}
     */
    public function verifyConnection(?string $header): bool
    {
        if (null === $header || false === mb_strpos($header, 'VOTIFIER')) {
            return false;
        }

        return true;
    }

    /**
     * Create encrypted package for default Votifier.
     *
     * @param voteInterface $vote (Required) The vote package with all the information
     *
     * @return string returns the string to be sent to the server
     */
    public function preparePackage(VoteInterface $vote): string
    {
        // Details of the vote
        $votePackage = 'VOTE'."\n".
            $vote->getServiceName()."\n".
            $vote->getUsername()."\n".
            $vote->getAddress()."\n".
            $vote->getTimestamp()."\n";

        // Encrypt the string
        openssl_public_encrypt($votePackage, $encryptedVotePackage, $this->getPublicKey());

        return $encryptedVotePackage;
    }

    /**
     * {@inheritdoc}
     */
    public function send(ServerConnection $connection, VoteInterface $vote): void
    {
        if (!$this->verifyConnection($connection->receive(64))) {
            throw new Exception(Messages::get(Messages::NOT_VOTIFIER));
        }

        if (!$connection->send($this->preparePackage($vote))) {
            throw new Exception(Messages::get(Messages::NOT_SENT_PACKAGE));
        }
    }
}
