<?php

/**
 * Votifier PHP Client
 *
 * @package   VotifierClient
 * @author    Manuele Vaccari <manuele.vaccari@gmail.com>
 * @copyright Copyright (c) 2017-2020 Manuele Vaccari <manuele.vaccari@gmail.com>
 * @license   https://github.com/D3strukt0r/votifier-client-php/blob/master/LICENSE.txt GNU General Public License v3.0
 * @link      https://github.com/D3strukt0r/votifier-client-php
 */

namespace D3strukt0r\VotifierClient\ServerType;

use D3strukt0r\VotifierClient\Messages;
use D3strukt0r\VotifierClient\ServerConnection;
use D3strukt0r\VotifierClient\VoteType\VoteInterface;
use Exception;

/**
 * The Class to access a server which uses the plugin "NuVotifier".
 */
class NuVotifier extends ClassicVotifier
{
    /**
     * @var bool use version 2 of the protocol
     */
    private $protocolV2;

    /**
     * @var string|null The token from the config.yml.
     */
    private $token;

    /**
     * Creates the NuVotifier object.
     *
     * @param string      $host       (Required) The domain or ip to connect to Votifier
     * @param int|null    $port       (Required) The port which votifier uses on the server
     * @param string|null $publicKey  (Required) The key which is generated by the plugin. Only needed if using v1!
     * @param bool        $protocolV2 (Optional) Use version 2 of the protocol (Recommended)
     * @param string|null $token      (Optional) To use version 2 protocol the token is needed from the config.yml.
     *
     * @throws \Exception
     */
    public function __construct(
        string $host,
        ?int $port,
        ?string $publicKey,
        bool $protocolV2 = false,
        ?string $token = null
    ) {
        if (null === $publicKey) {
            if ($protocolV2) {
                $publicKey = 'empty';
            } else {
                throw new Exception('When not using v2 for the protocol, the public key is required!');
            }
        }
        parent::__construct($host, $port, $publicKey);

        $this->protocolV2 = $protocolV2;
        $this->token = $token;
    }

    /**
     * Checks whether the connection uses the version 2 protocol.
     *
     * @return bool returns true, if using the new version of NuVotifier or false otherwise
     */
    public function isProtocolV2(): bool
    {
        return $this->protocolV2;
    }

    /**
     * {@inheritdoc}
     *
     * @param string|null $header (Required) The header that the plugin usually sends
     *
     * @return bool returns true if connections is avilable, otherwise false
     */
    public function verifyConnection(?string $header): bool
    {
        $header_parts = explode(' ', $header);
        if (null === $header || false === mb_strpos($header, 'VOTIFIER') || 3 !== \count($header_parts)) {
            return false;
        }

        return true;
    }

    /**
     * Prepares the vote package to be sent as version 2 protocol package.
     *
     * @param VoteInterface $vote      (Required) The vote package with information
     * @param string        $challenge (Required) The challenge sent by the server
     *
     * @return string returns the string to be sent to the server
     */
    public function preparePackageV2(VoteInterface $vote, string $challenge): string
    {
        $payloadJson = json_encode([
            'username' => $vote->getUsername(),
            'serviceName' => $vote->getServiceName(),
            'timestamp' => $vote->getTimestamp(),
            'address' => $vote->getAddress(),
            'challenge' => $challenge,
        ]);
        $signature = base64_encode(hash_hmac('sha256', $payloadJson, $this->token, true));
        $messageJson = json_encode(['signature' => $signature, 'payload' => $payloadJson]);

        return pack('nn', 0x733a, mb_strlen($messageJson)).$messageJson;
    }

    /**
     * {@inheritdoc}
     *
     * @param serverConnection $connection (Required) The connection type to the plugin
     * @param VoteInterface    $vote       (Required) The vote type package
     *
     * @throws \Exception
     */
    public function send(ServerConnection $connection, VoteInterface $vote): void
    {
        if (!$this->isProtocolV2()) {
            parent::send($connection, $vote);

            return;
        }

        if (!$this->verifyConnection($header = $connection->receive(64))) {
            throw new Exception(Messages::get(Messages::NOT_VOTIFIER));
        }
        $header_parts = explode(' ', $header);
        $challenge = mb_substr($header_parts[2], 0, -1);
        $payload = $this->preparePackageV2($vote, $challenge);

        if (false === $connection->send($payload)) {
            throw new Exception(Messages::get(Messages::NOT_SENT_PACKAGE));
        }

        if (!$response = $connection->receive(256)) {
            throw new Exception(Messages::get(Messages::NOT_RECEIVED_PACKAGE));
        }

        $result = json_decode($response);
        if ('ok' !== $result->status) {
            throw new Exception(Messages::get(Messages::NOT_RECEIVED_PACKAGE, null, $result->cause, $result->error));
        }
    }
}
